buildscript {
    ext {
        springBootVersion = '2.0.5.RELEASE'
    }
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'org.hidetake.swagger.generator' version '2.14.0'
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'java-library'

group = 'tsystems.tcahllenge.codemaster'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.10


repositories {
    mavenCentral()
}



ext {
    mapstructVersion = "1.2.0.Final"
    lombokVersion = "1.18.2"
    generatedDir = 'build/generated-sources'
}


dependencies {
    implementation('org.springframework.boot:spring-boot-starter-data-mongodb')
    implementation('org.springframework.boot:spring-boot-starter-data-rest')
//    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-web')
    compileOnly('org.projectlombok:lombok')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('de.flapdoodle.embed:de.flapdoodle.embed.mongo')
    testImplementation('org.springframework.security:spring-security-test')
    implementation 'com.spotify:docker-client:8.14.3'
    implementation group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '2.26'
    implementation group: 'org.glassfish.jersey.core', name: 'jersey-common', version: '2.26'
    implementation group: 'org.glassfish.jersey.bundles.repackaged', name: 'jersey-guava', version: '2.25.1'
    implementation group: 'com.google.guava', name: 'guava', version: '26.0-jre'
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    implementation "org.mapstruct:mapstruct-jdk8:${mapstructVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.0.6.RELEASE'
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

//    swaggerCodegen 'io.swagger:swagger-codegen-cli:2.3.1'             // Swagger Codegen V2
    swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.0'  // or Swagger Codegen V3
}

swaggerSources {
    codemaster {
        inputFile = file('src/main/resources/swagger/api.yaml')
        code {
            outputDir = file(generatedDir)
            configFile = file('src/main/resources/swagger/config.json')
            language = 'spring'
        }
    }

}


task removeSwaggerTrash {
    doLast {
        def generatedDir = file(generatedDir)
        println "Deleting swagger trash from  ${generatedDir}"
        def remainOnlyContestPackage = {
            if (it.name != "ru") {
                println "Deleting ${it.name}"
                it.delete()
                it.deleteDir()
            }
        }
        generatedDir.eachFile(remainOnlyContestPackage)
    }
}



removeSwaggerTrash.dependsOn generateSwaggerCode
compileJava.dependsOn removeSwaggerTrash
sourceSets.main.java.srcDir "${swaggerSources.codemaster.code.outputDir}"